version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    environment:
      - DATABASE_URL=postgresql://medlab:${DB_PASSWORD}@db:5432/medlabpro
      - SESSION_SECRET=${SESSION_SECRET}
      - FLASK_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - WEB_CONCURRENCY=4
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - medlab-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=medlabpro
      - POSTGRES_USER=medlab
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medlab -d medlabpro"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - medlab-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/app/static:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - medlab-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - medlab-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Backup service for automated database backups
  backup:
    image: postgres:15-alpine
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - postgres_backups:/backups
      - ./scripts:/scripts:ro
    networks:
      - medlab-network
    environment:
      - PGPASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=medlabpro
      - POSTGRES_USER=medlab
      - POSTGRES_HOST=db
    command: >
      sh -c "
        while true; do
          sleep 86400;
          pg_dump -h db -U medlab -d medlabpro | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz;
          find /backups -name '*.sql.gz' -mtime +7 -delete;
        done
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local

networks:
  medlab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: medlab-br0