# Production Nginx Configuration for MedLab Pro
# مدیسیتا (Medisita) - Medical Laboratory Management System

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    server_tokens off;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;

    # Cache Configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=medlab_cache:10m max_size=1g 
                     inactive=60m use_temp_path=off;

    # Upstream Backend
    upstream medlab_backend {
        server web:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP Server (redirect to HTTPS)
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint (HTTP only for load balancers)
        location /health {
            proxy_pass http://medlab_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS Server
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/medlab.crt;
        ssl_certificate_key /etc/nginx/ssl/medlab.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # Root and Index
        root /var/www/html;
        index index.html;

        # Main Application
        location / {
            # Rate limiting for login endpoints
            if ($request_uri ~ "^/login") {
                limit_req zone=login burst=10 nodelay;
            }

            # Rate limiting for API endpoints
            if ($request_uri ~ "^/api/") {
                limit_req zone=api burst=20 nodelay;
            }

            proxy_pass http://medlab_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Connection settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Static Files (uploaded files)
        location /static/uploads/ {
            alias /var/www/uploads/;
            expires 1M;
            add_header Cache-Control "public, immutable";
            limit_req zone=static burst=100 nodelay;
            
            # Security for uploads
            location ~* \.(php|php5|phtml|pl|py|jsp|asp|sh|cgi)$ {
                deny all;
            }
        }

        # Static Assets with Caching
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            limit_req zone=static burst=100 nodelay;
            
            # Try to serve from cache first
            proxy_cache medlab_cache;
            proxy_cache_valid 200 1y;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_pass http://medlab_backend;
        }

        # Health Check Endpoint
        location /health {
            proxy_pass http://medlab_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Disable caching for health checks
            proxy_cache off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            access_log off;
        }

        # Security: Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ \.(env|py|pyc|pyo|pyd|pyw|pyz|pyzw|ini|cfg|conf|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block common exploit attempts
        location ~ /(wp-admin|wp-login|admin|phpmyadmin|mysql) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Custom Error Pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /var/www/html;
            internal;
        }
        
        location = /50x.html {
            root /var/www/html;
            internal;
        }
    }

    # Server for custom domain (if configured)
    # Uncomment and modify for your domain
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com www.yourdomain.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/yourdomain.crt;
    #     ssl_certificate_key /etc/nginx/ssl/yourdomain.key;
    #     
    #     # Include the same configuration as above
    #     include /etc/nginx/conf.d/medlab-common.conf;
    # }
}